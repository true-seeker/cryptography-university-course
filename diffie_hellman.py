from Crypto.Util import number
import random


def fast_pow_module(number: int, power: int, module: int):
    """Быстрое возведение в степень по модулю"""
    if power == 0:
        return 1

    z = fast_pow_module(number, power // 2, module)

    if power % 2 == 0:
        return z * z % module
    else:
        return number * z * z % module


g = random.randint(0, 2 ** 640)
p = random.randint(0, 2 ** 640)
g = 165133395500999037256418219149883516862517818903889720465900402215982938789086475810774240549093632213527203385867385987301463533560709186579383976636226061442113812581843299796649799102564104
p = 192848781050384500569400803495912055157634799288365665944694331129682093101970606163371945476980369750436508841087782739091524881381458031661063563230165451457510031094582529418944870180702715

a = number.getPrime(256)
b = number.getPrime(256)
a = 95082564562059922803559979613954840357975522878163709317707695306789677657833

A = fast_pow_module(g, a, p)
B = fast_pow_module(g, b, p)
A = 26371050510293217850318497811473751637550032427744557050277414097563891533893110382773316360416012504683339979725496981493775566818990664361160281572268947592803672955258351484708389444274164
B = 4797692598151796198278820741582818598524783334741201709488019329959736083164985153215971258708545494715814804383383359558911816824083614650541751266806447820366404697226939763288114961655944

B_1 = fast_pow_module(B, a, p)
A_1 = fast_pow_module(A, b, p)

print('g', g)
print('p', p)
print('a', a)
print('b', b)
print('A', A)
print('B', B)
print('B_1', B_1)
print('A_1', A_1)

print(B_1 == A_1)
